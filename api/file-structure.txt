Open API Kundenbeziehung - Complete File Structure
===============================================================

Root Files
├── openapi.yaml                    # Complete OpenAPI specification
├── package.json                    # Node.js dependencies and scripts
├── .env-config.sh                  # Environment configuration template
├── README.md                       # Complete project documentation
├── Dockerfile                      # Docker container configuration
├── docker-compose.yml              # Multi-service Docker setup
├── .gitignore                      # Git ignore patterns
└── .eslintrc.js                    # ESLint configuration

📁 src/ - Application Source Code
├── app.js                          # Main Express application server
├── 📁 middleware/
│   ├── auth.js                     # JWT authentication & authorization
│   ├── mtls.js                     # Mutual TLS certificate validation
│   ├── validation.js               # Request/response validation (Joi)
│   └── errorHandler.js             # Centralized error handling
├── 📁 routes/
│   ├── consent.js                  # Consent management endpoints
│   ├── customer.js                 # Customer data exchange
│   ├── identification.js           # Identity verification services
│   ├── checks.js                   # Background checks (KYC/AML/PEP)
│   ├── signature.js                # Digital signature services
│   ├── registry.js                 # Participant registry
│   └── health.js                   # Health check endpoints
├── 📁 utils/
│   └── logger.js                   # Winston-based logging utility
└── 📁 models/                      # Data models (to be implemented)
    ├── Customer.js
    ├── Consent.js
    └── Institution.js

📁 config/ - Configuration Files
├── database.js                     # Database connection config
├── security.js                     # Security settings
└── environments/
    ├── development.js
    ├── production.js
    └── test.js

📁 certificates/ - Certificate Management
├── trusted/                        # Trusted institution certificates
├── client/                         # Client certificates for mTLS
└── ca/                             # Certificate Authority files

📁 docs/ - Documentation
├── api-reference.md                # Detailed API reference
├── security-guide.md               # Security implementation guide
├── deployment-guide.md             # Production deployment guide
├── developer-guide.md              # Developer setup and usage
├── compliance.md                   # Regulatory compliance guide
└── 📁 postman/                     # Postman collections
    ├── Open-API-Kundenbeziehung.postman_collection.json
    └── environments/

📁 tests/ - Test Suite
├── 📁 unit/
│   ├── middleware/
│   ├── routes/
│   └── utils/
├── 📁 integration/
│   ├── consent.test.js
│   ├── customer.test.js
│   └── auth.test.js
├── 📁 e2e/
│   └── complete-flow.test.js
└── fixtures/
    ├── sample-customers.json
    └── test-certificates.json

📁 scripts/ - Utility Scripts
├── setup.sh                       # Initial setup script
├── generate-certs.sh               # Certificate generation
├── migrate-db.js                   # Database migrations
└── seed-data.js                    # Sample data seeding

📁 nginx/ - Reverse Proxy Configuration
├── nginx.conf                      # Main Nginx configuration
├── ssl/                            # SSL certificates
└── sites-available/
    └── open-api-kundenbeziehung

📁 logs/ - Application Logs (created at runtime)
├── app.log                         # General application logs
├── error.log                       # Error logs
├── security.log                    # Security events
├── audit.log                       # Audit trail
└── access.log                      # HTTP access logs

📁 monitoring/ - Monitoring & Observability
├── prometheus.yml                  # Prometheus configuration
├── grafana/
│   └── dashboards/
│       ├── api-metrics.json
│       └── security-metrics.json
└── alerting/
    └── rules.yml

Additional Configuration Files
├── .dockerignore                   # Docker ignore patterns
├── .env.production                 # Production environment
├── .env.test                       # Test environment
├── ecosystem.config.js             # PM2 process manager config
├── jest.config.js                  # Jest testing configuration
├── healthcheck.js                  # Docker healthcheck script
└── CHANGELOG.md                    # Version history

Development Files
├── .vscode/                        # VS Code settings
│   ├── settings.json
│   └── launch.json
├── .github/                        # GitHub workflows
│   └── workflows/
│       ├── ci.yml
│       └── security-scan.yml
└── LICENSE                         # License

===============================================================

Quick Start Commands:
- npm install                       # Install dependencies
- cp .env.example .env              # Setup environment
- npm run dev                       # Start development server
- docker-compose up -d              # Run with Docker
- npm test                          # Run test suite
- npm run docs                      # Generate documentation
