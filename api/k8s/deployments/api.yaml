apiVersion: apps/v1
kind: Deployment
metadata:
  name: swiss-openapi-api
  namespace: swiss-openapi-kundenbeziehung
  labels:
    app: swiss-openapi-api
    component: application
    tier: backend
spec:
  replicas: 3  # High availability with multiple replicas
  selector:
    matchLabels:
      app: swiss-openapi-api
  template:
    metadata:
      labels:
        app: swiss-openapi-api
        component: application
        tier: backend
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      serviceAccountName: api-service-account
      containers:
      - name: api
        image: swiss-openapi-kundenbeziehung:latest  # Replace with your actual image
        imagePullPolicy: Always
        ports:
        - containerPort: 3000
          name: http
          protocol: TCP
        env:
        # Configuration from ConfigMap
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: api-config
              key: NODE_ENV
        - name: PORT
          valueFrom:
            configMapKeyRef:
              name: api-config
              key: PORT
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: api-config
              key: LOG_LEVEL
        - name: JWT_ISSUER
          valueFrom:
            configMapKeyRef:
              name: api-config
              key: JWT_ISSUER
        - name: FAPI_REQUIRE_PAR
          valueFrom:
            configMapKeyRef:
              name: api-config
              key: FAPI_REQUIRE_PAR
        - name: FAPI_REQUIRE_DPOP
          valueFrom:
            configMapKeyRef:
              name: api-config
              key: FAPI_REQUIRE_DPOP
        - name: FAPI_REQUIRE_MTLS
          valueFrom:
            configMapKeyRef:
              name: api-config
              key: FAPI_REQUIRE_MTLS
        - name: RATE_LIMIT_WINDOW
          valueFrom:
            configMapKeyRef:
              name: api-config
              key: RATE_LIMIT_WINDOW
        - name: AUDIT_LOG_RETENTION_DAYS
          valueFrom:
            configMapKeyRef:
              name: api-config
              key: AUDIT_LOG_RETENTION_DAYS
        
        # Secrets
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: api-secrets
              key: JWT_SECRET
        - name: MONGODB_USERNAME
          valueFrom:
            secretKeyRef:
              name: api-secrets
              key: MONGODB_USERNAME
        - name: MONGODB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: api-secrets
              key: MONGODB_PASSWORD
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: api-secrets
              key: REDIS_PASSWORD
        
        # Service discovery
        - name: MONGODB_URL
          value: "mongodb://$(MONGODB_USERNAME):$(MONGODB_PASSWORD)@mongodb:27017/openapi-kundenbeziehung"
        - name: REDIS_URL
          value: "redis://:$(REDIS_PASSWORD)@redis:6379"
        - name: BASE_URL
          value: "https://api.kundenbeziehung.ch"
        
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        
        # Health checks
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /health
            port: 3000
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        
        # Startup probe for slow initialization
        startupProbe:
          httpGet:
            path: /health
            port: 3000
            scheme: HTTP
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 10
        
        # Volume mounts for certificates and logs
        volumeMounts:
        - name: app-logs
          mountPath: /usr/src/app/logs
        
        # Security context
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1001
      
      # Pod volumes
      volumes:
      - name: app-logs
        emptyDir: {}
      
      # Image pull secrets for private registry
      imagePullSecrets:
      - name: docker-registry-secret
      
      # Pod disruption budget for high availability
      terminationGracePeriodSeconds: 30
      
      # Node selection (optional)
      nodeSelector:
        node-type: application  # Adjust based on your node labels
      
      # Pod anti-affinity for distribution across nodes
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - swiss-openapi-api
              topologyKey: kubernetes.io/hostname

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: api-service-account
  namespace: swiss-openapi-kundenbeziehung
  labels:
    app: swiss-openapi-api
    component: rbac

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: api-role
  namespace: swiss-openapi-kundenbeziehung
  labels:
    app: swiss-openapi-api
    component: rbac
rules:
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: api-role-binding
  namespace: swiss-openapi-kundenbeziehung
  labels:
    app: swiss-openapi-api
    component: rbac
subjects:
- kind: ServiceAccount
  name: api-service-account
  namespace: swiss-openapi-kundenbeziehung
roleRef:
  kind: Role
  name: api-role
  apiGroup: rbac.authorization.k8s.io

---
# Horizontal Pod Autoscaler for automatic scaling
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: swiss-openapi-api-hpa
  namespace: swiss-openapi-kundenbeziehung
  labels:
    app: swiss-openapi-api
    component: autoscaling
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: swiss-openapi-api
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 20
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60