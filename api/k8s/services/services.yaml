apiVersion: v1
kind: Service
metadata:
  name: swiss-openapi-api
  namespace: swiss-openapi-kundenbeziehung
  labels:
    app: swiss-openapi-api
    component: application
    tier: backend
spec:
  type: ClusterIP
  ports:
  - port: 3000
    targetPort: 3000
    protocol: TCP
    name: http
  selector:
    app: swiss-openapi-api

---
apiVersion: v1
kind: Service
metadata:
  name: mongodb
  namespace: swiss-openapi-kundenbeziehung
  labels:
    app: mongodb
    component: database
    tier: backend
spec:
  type: ClusterIP
  ports:
  - port: 27017
    targetPort: 27017
    protocol: TCP
    name: mongodb
  selector:
    app: mongodb

---
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: swiss-openapi-kundenbeziehung
  labels:
    app: redis
    component: cache
    tier: backend
spec:
  type: ClusterIP
  ports:
  - port: 6379
    targetPort: 6379
    protocol: TCP
    name: redis
  selector:
    app: redis

---
apiVersion: v1
kind: Service
metadata:
  name: nginx
  namespace: swiss-openapi-kundenbeziehung
  labels:
    app: nginx
    component: proxy
    tier: frontend
  annotations:
    # Load balancer annotations (adjust for your cloud provider)
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"  # AWS NLB
    service.beta.kubernetes.io/aws-load-balancer-ssl-cert: "arn:aws:acm:region:account:certificate/cert-id"  # AWS ACM certificate
    service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "https"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "http"
    # Azure Load Balancer annotations
    # service.beta.kubernetes.io/azure-load-balancer-internal: "false"
    # GCP Load Balancer annotations  
    # cloud.google.com/load-balancer-type: "External"
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
    name: http
  - port: 443
    targetPort: 443
    protocol: TCP
    name: https
  selector:
    app: nginx
  # External traffic policy for client IP preservation
  externalTrafficPolicy: Local

---
# Headless service for StatefulSet deployments (if used)
apiVersion: v1
kind: Service
metadata:
  name: mongodb-headless
  namespace: swiss-openapi-kundenbeziehung
  labels:
    app: mongodb
    component: database
    tier: backend
spec:
  clusterIP: None
  ports:
  - port: 27017
    targetPort: 27017
    protocol: TCP
    name: mongodb
  selector:
    app: mongodb

---
# Internal service for monitoring and health checks
apiVersion: v1
kind: Service
metadata:
  name: api-internal
  namespace: swiss-openapi-kundenbeziehung
  labels:
    app: swiss-openapi-api
    component: monitoring
    tier: backend
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "3000"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - port: 3000
    targetPort: 3000
    protocol: TCP
    name: metrics
  selector:
    app: swiss-openapi-api