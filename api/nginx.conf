# Nginx Configuration for Swiss Open API Kundenbeziehung
# Production-ready reverse proxy with FAPI 2.0 compliance

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging format optimized for FAPI 2.0 audit requirements
    log_format fapi_audit '$remote_addr - $remote_user [$time_local] '
                          '"$request" $status $body_bytes_sent '
                          '"$http_referer" "$http_user_agent" '
                          '"$http_x_forwarded_for" "$http_authorization" '
                          '"$http_dpop" "$request_id" $request_time';
    
    access_log /var/log/nginx/access.log fapi_audit;

    # Basic nginx optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 64k;

    # Security headers for FAPI 2.0 compliance
    add_header X-Content-Type-Options nosniff always;
    add_header X-Frame-Options DENY always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    
    # Remove server signature
    server_tokens off;

    # Rate limiting for security
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=auth:10m rate=5r/s;
    limit_req_zone $binary_remote_addr zone=token:10m rate=2r/s;

    # Upstream configuration for API server
    upstream api_backend {
        server api:3000 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    # HTTPS redirect server
    server {
        listen 80;
        listen [::]:80;
        server_name api.kundenbeziehung.ch *.kundenbeziehung.ch;
        
        # Security headers even for HTTP
        add_header X-Content-Type-Options nosniff always;
        add_header X-Frame-Options DENY always;
        
        # Redirect all HTTP traffic to HTTPS (FAPI 2.0 requirement)
        return 301 https://$host$request_uri;
    }

    # Main HTTPS server
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name api.kundenbeziehung.ch;

        # SSL/TLS configuration for FAPI 2.0
        ssl_certificate /etc/nginx/ssl/server.crt;
        ssl_certificate_key /etc/nginx/ssl/server.key;
        ssl_client_certificate /etc/nginx/ssl/ca.crt;
        ssl_verify_client optional;
        ssl_verify_depth 2;

        # Modern TLS configuration
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 1d;
        ssl_session_tickets off;

        # HSTS header
        add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;

        # Security headers
        add_header X-Content-Type-Options nosniff always;
        add_header X-Frame-Options DENY always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Content-Security-Policy "default-src 'self'; script-src 'self'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; font-src 'self'; connect-src 'self'; frame-ancestors 'none';" always;

        # Request ID for tracing
        add_header X-Request-ID $request_id always;

        # Health check endpoint (no authentication required)
        location /health {
            limit_req zone=api burst=5 nodelay;
            
            proxy_pass http://api_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Request-ID $request_id;
            
            proxy_connect_timeout 5s;
            proxy_send_timeout 5s;
            proxy_read_timeout 5s;
        }

        # OAuth/OIDC endpoints - strict rate limiting
        location ~ ^/(authorize|token|par|userinfo|introspect|revoke) {
            limit_req zone=auth burst=10 nodelay;
            
            # Cache control for OAuth endpoints
            add_header Cache-Control "no-store, no-cache, must-revalidate, private" always;
            add_header Pragma "no-cache" always;
            
            # Pass client certificate information
            proxy_set_header X-SSL-Client-Verify $ssl_client_verify;
            proxy_set_header X-SSL-Client-DN $ssl_client_s_dn;
            proxy_set_header X-SSL-Client-Serial $ssl_client_serial;
            proxy_set_header X-SSL-Client-Fingerprint $ssl_client_fingerprint;
            proxy_set_header X-SSL-Client-Cert $ssl_client_escaped_cert;
            
            proxy_pass http://api_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Request-ID $request_id;
            
            # OAuth specific timeouts
            proxy_connect_timeout 10s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

        # Token endpoint - most restrictive rate limiting
        location /token {
            limit_req zone=token burst=5 nodelay;
            
            # Strict caching headers
            add_header Cache-Control "no-store, no-cache, must-revalidate, private" always;
            add_header Pragma "no-cache" always;
            
            # mTLS validation for token endpoint (FAPI 2.0 requirement)
            if ($ssl_client_verify != SUCCESS) {
                return 400 '{"error":"invalid_client","error_description":"Valid client certificate required"}';
            }
            
            # Pass client certificate information
            proxy_set_header X-SSL-Client-Verify $ssl_client_verify;
            proxy_set_header X-SSL-Client-DN $ssl_client_s_dn;
            proxy_set_header X-SSL-Client-Serial $ssl_client_serial;
            proxy_set_header X-SSL-Client-Fingerprint $ssl_client_fingerprint;
            proxy_set_header X-SSL-Client-Cert $ssl_client_escaped_cert;
            
            proxy_pass http://api_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Request-ID $request_id;
            
            proxy_connect_timeout 10s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

        # Well-known endpoints (discovery)
        location /.well-known/ {
            limit_req zone=api burst=20 nodelay;
            
            # Cache discovery documents for 1 hour
            add_header Cache-Control "public, max-age=3600" always;
            
            proxy_pass http://api_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Request-ID $request_id;
            
            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;
        }

        # API endpoints - standard rate limiting
        location /v1/ {
            limit_req zone=api burst=20 nodelay;
            
            # Pass client certificate for mTLS validation
            proxy_set_header X-SSL-Client-Verify $ssl_client_verify;
            proxy_set_header X-SSL-Client-DN $ssl_client_s_dn;
            proxy_set_header X-SSL-Client-Fingerprint $ssl_client_fingerprint;
            proxy_set_header X-SSL-Client-Cert $ssl_client_escaped_cert;
            
            proxy_pass http://api_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Request-ID $request_id;
            
            # Preserve DPoP header for FAPI 2.0
            proxy_set_header DPoP $http_dpop;
            
            proxy_connect_timeout 10s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }

        # Default location with strict rate limiting
        location / {
            limit_req zone=api burst=10 nodelay;
            
            proxy_pass http://api_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Request-ID $request_id;
            
            proxy_connect_timeout 10s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

        # Security: Block access to sensitive files
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }
        
        location ~ \.(md|json|yaml|yml|log)$ {
            deny all;
            access_log off;
            log_not_found off;
        }
    }

    # Wildcard server for other subdomains
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name *.kundenbeziehung.ch;
        
        # Use same SSL configuration
        ssl_certificate /etc/nginx/ssl/server.crt;
        ssl_certificate_key /etc/nginx/ssl/server.key;
        
        # Basic security headers
        add_header X-Content-Type-Options nosniff always;
        add_header X-Frame-Options DENY always;
        
        # Redirect to main API domain
        return 301 https://api.kundenbeziehung.ch$request_uri;
    }
}