openapi: 3.0.3
info:
  title: Open API Kundenbeziehung - Swiss National Standard
  description: |
    Schweizer Standard für den branchenübergreifenden Austausch von Kundendaten zur Etablierung einer selbstbestimmten digitalen Kundenbeziehung.
    
    Diese API implementiert das vollständige Framework der Open API Kundenbeziehung mit dem universellen 10-Stufen-Referenzprozess und ermöglicht standardisierten Datenaustausch zwischen Finanzdienstleistern und anderen Ecosystemen.
    
    **Implementierte Module (Datenbausteine):**
    - Initialisierung (Step 1) - Service Discovery & Cookie Consent
    - Produktauswahl (Step 2) - Bedürfnisbefriedigung & Konfiguration  
    - Selbstdeklaration (Step 3) - FATCA/MIFID II Information
    - Basisdaten (Step 4) - Identität, Kontakt, Adresse
    - Erweiterte Daten (Step 5) - Risiko-/Potenzialermittlung
    - Identifikation (Step 6) - E-ID kompatibel, VideoIdent
    - Background Checks (Step 7) - KYC, AML, PEP, Sanctions
    - Vertragsabschluss (Step 8) - AGB-Akzeptanz
    - Signatur-Services (Step 9) - QES/AES/eSignatur
    - Metadaten-Management (Step 10) - Verarbeitung & Integration
    
    **Use Cases Implementiert:**
    - UC1: Kundenbeziehungseröffnung (Banking Account Opening)
    - UC2: Re-Identifikation (Cross-Provider Identity Reuse)
    - UC3: Altersverifikation (Privacy-preserving Age Verification)
    - UC4: CLM von EVV-Endkunden (External Wealth Management Lifecycle)
    
    **Sicherheitsstandards:**
    - FAPI 2.0 Security Profile Compliance
    - OAuth 2.1 / OpenID Connect with PKCE
    - mTLS und DPoP für kritische Services
    - JWT-basierte Autorisierung (PS256, ES256, EdDSA)
    - PAR (Pushed Authorization Requests)
    
    **Regulatorische Compliance:**
    - DSGVO/nDSG konform mit Privacy-by-Design
    - Banking Regulations (FINMA, GwG)
    - MiFID II Suitability Assessment Integration
    - E-ID Framework Integration (ready)
  version: "1.0.0"
  contact:
    name: Open Banking Project
    url: https://openbankingproject.ch
    email: info@openbankingproject.ch
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.openbanking.ch/v1
    description: Production Server
  - url: https://sandbox-api.openbanking.ch/v1
    description: Sandbox Environment

security:
  - BearerAuth: []
  - mTLS: []

paths:
  # OAUTH 2.1 / OIDC ENDPOINTS (FAPI 2.0 Compliant)
  /authorize:
    get:
      summary: OAuth 2.1 Authorization Endpoint
      description: |
        FAPI 2.0 compliant OAuth 2.1 authorization endpoint. Supports PAR (Pushed Authorization Requests)
        and requires PKCE for all authorization flows.
      operationId: authorize
      tags:
        - OAuth 2.1 / OIDC
      parameters:
        - name: response_type
          in: query
          required: true
          schema:
            type: string
            enum: [code]
          description: Must be 'code' for authorization code flow
        - name: client_id
          in: query
          required: true
          schema:
            type: string
          description: OAuth client identifier
        - name: redirect_uri
          in: query
          required: true
          schema:
            type: string
            format: uri
          description: Client redirect URI
        - name: scope
          in: query
          required: true
          schema:
            type: string
          description: Requested OAuth scopes
        - name: state
          in: query
          required: true
          schema:
            type: string
          description: Client state parameter for CSRF protection
        - name: code_challenge
          in: query
          required: true
          schema:
            type: string
          description: PKCE code challenge (S256)
        - name: code_challenge_method
          in: query
          required: true
          schema:
            type: string
            enum: [S256]
          description: PKCE code challenge method
        - name: nonce
          in: query
          schema:
            type: string
          description: OpenID Connect nonce
        - name: request_uri
          in: query
          schema:
            type: string
          description: PAR request URI (urn:ietf:params:oauth:request_uri:*)
      responses:
        '302':
          description: Redirect to redirect_uri with authorization code
        '400':
          description: Invalid authorization request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuthError'
        '401':
          $ref: '#/components/responses/Unauthorized'
      security: []
  
  /token:
    post:
      summary: OAuth 2.1 Token Endpoint
      description: |
        FAPI 2.0 compliant token endpoint supporting authorization_code and refresh_token grants.
        Requires mTLS or private_key_jwt client authentication.
      operationId: token
      tags:
        - OAuth 2.1 / OIDC
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - grant_type
                - client_id
              properties:
                grant_type:
                  type: string
                  enum: [authorization_code, refresh_token]
                client_id:
                  type: string
                code:
                  type: string
                  description: Required for authorization_code grant
                redirect_uri:
                  type: string
                  format: uri
                  description: Required for authorization_code grant
                code_verifier:
                  type: string
                  description: PKCE code verifier
                refresh_token:
                  type: string
                  description: Required for refresh_token grant
                client_assertion_type:
                  type: string
                  enum: [urn:ietf:params:oauth:client-assertion-type:jwt-bearer]
                  description: For private_key_jwt authentication
                client_assertion:
                  type: string
                  description: JWT assertion for private_key_jwt authentication
            examples:
              authorization_code:
                summary: Authorization Code Grant
                value:
                  grant_type: authorization_code
                  client_id: bank-client-001
                  code: auth_code_123
                  redirect_uri: https://client.example.com/callback
                  code_verifier: pkce_verifier_123
      responses:
        '200':
          description: Access token response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '400':
          description: Invalid token request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuthError'
        '401':
          $ref: '#/components/responses/Unauthorized'
      security:
        - mTLS: []
        - private_key_jwt: []

  /userinfo:
    get:
      summary: OpenID Connect UserInfo Endpoint
      description: |
        Returns user information for the authenticated user. Supports DPoP token binding.
      operationId: userinfo
      tags:
        - OAuth 2.1 / OIDC
      responses:
        '200':
          description: User information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
      security:
        - BearerAuth: [openid, profile]
        - DPoP: [openid, profile]

  /introspect:
    post:
      summary: OAuth 2.1 Token Introspection
      description: |
        RFC 7662 compliant token introspection endpoint for resource servers.
      operationId: introspect
      tags:
        - OAuth 2.1 / OIDC
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
                  description: Token to introspect
                token_type_hint:
                  type: string
                  enum: [access_token, refresh_token]
                  description: Hint about token type
      responses:
        '200':
          description: Token introspection response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntrospectionResponse'
        '400':
          description: Invalid introspection request
        '401':
          $ref: '#/components/responses/Unauthorized'
      security:
        - mTLS: []

  # PUSHED AUTHORIZATION REQUESTS (PAR)
  /par:
    post:
      summary: Pushed Authorization Request
      description: |
        FAPI 2.0 compliant PAR endpoint for securely submitting authorization request parameters.
      operationId: pushedAuthorizationRequest
      tags:
        - OAuth 2.1 / OIDC
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - client_id
                - response_type
                - scope
                - redirect_uri
                - code_challenge
                - code_challenge_method
              properties:
                client_id:
                  type: string
                response_type:
                  type: string
                  enum: [code]
                scope:
                  type: string
                redirect_uri:
                  type: string
                  format: uri
                state:
                  type: string
                code_challenge:
                  type: string
                code_challenge_method:
                  type: string
                  enum: [S256]
                nonce:
                  type: string
                purpose:
                  type: string
                  enum: [accountOpening, creditAssessment, compliance, customerUpdate]
      responses:
        '201':
          description: PAR response with request_uri
          content:
            application/json:
              schema:
                type: object
                required:
                  - request_uri
                  - expires_in
                properties:
                  request_uri:
                    type: string
                    pattern: '^urn:ietf:params:oauth:request_uri:'
                  expires_in:
                    type: integer
                    maximum: 60
                    description: Request URI lifetime in seconds (max 60)
        '400':
          description: Invalid PAR request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuthError'
        '401':
          $ref: '#/components/responses/Unauthorized'
      security:
        - mTLS: []
        - private_key_jwt: []

  # DYNAMIC CLIENT REGISTRATION
  /register:
    post:
      summary: Dynamic Client Registration
      description: |
        RFC 7591 compliant dynamic client registration with FAPI 2.0 enhancements.
      operationId: registerClient
      tags:
        - Client Management
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientRegistrationRequest'
      responses:
        '201':
          description: Client registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientRegistrationResponse'
        '400':
          description: Invalid client metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuthError'
        '401':
          $ref: '#/components/responses/Unauthorized'
      security:
        - mTLS: []

  /register/{client_id}:
    get:
      summary: Get Client Configuration
      description: Retrieve client configuration using registration access token
      operationId: getClientConfiguration
      tags:
        - Client Management
      parameters:
        - name: client_id
          in: path
          required: true
          schema:
            type: string
          description: OAuth client identifier
      responses:
        '200':
          description: Client configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientConfiguration'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Client not found
      security:
        - RegistrationToken: []
    
    put:
      summary: Update Client Configuration
      description: Update client configuration using registration access token
      operationId: updateClientConfiguration
      tags:
        - Client Management
      parameters:
        - name: client_id
          in: path
          required: true
          schema:
            type: string
          description: OAuth client identifier
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientUpdateRequest'
      responses:
        '200':
          description: Client updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientConfiguration'
        '400':
          description: Invalid client metadata
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Client not found
      security:
        - RegistrationToken: []
    
    delete:
      summary: Delete Client
      description: Delete client registration using registration access token
      operationId: deleteClient
      tags:
        - Client Management
      parameters:
        - name: client_id
          in: path
          required: true
          schema:
            type: string
          description: OAuth client identifier
      responses:
        '204':
          description: Client deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Client not found
      security:
        - RegistrationToken: []

  # OIDC/FAPI DISCOVERY
  /.well-known/openid-configuration:
    get:
      summary: OpenID Connect Discovery
      description: |
        OpenID Connect Discovery 1.0 compliant discovery document with FAPI 2.0 metadata.
      operationId: openidConfiguration
      tags:
        - Discovery
      responses:
        '200':
          description: OpenID Connect configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OIDCDiscovery'
      security: []

  /.well-known/fapi-configuration:
    get:
      summary: FAPI Configuration
      description: |
        FAPI 2.0 specific configuration metadata for Swiss financial services.
      operationId: fapiConfiguration
      tags:
        - Discovery
      responses:
        '200':
          description: FAPI configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FAPIConfiguration'
      security: []

  /.well-known/jwks.json:
    get:
      summary: JSON Web Key Set
      description: |
        Public keys for JWT signature verification (RFC 7517).
      operationId: jwks
      tags:
        - Discovery
      responses:
        '200':
          description: JSON Web Key Set
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWKSet'
      security: []

  /.well-known/swiss-banking-metadata:
    get:
      summary: Swiss Banking Metadata
      description: |
        Swiss Open Banking specific metadata including supported use cases and standards.
      operationId: swissBankingMetadata
      tags:
        - Discovery
      responses:
        '200':
          description: Swiss banking metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SwissBankingMetadata'
      security: []

  # CONSENT MANAGEMENT
  /consent:
    post:
      summary: Erstelle Consent-Request
      description: Initiiert einen Consent-Flow für Datenaustausch zwischen Institutionen
      operationId: createConsent
      tags:
        - Consent Management
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConsentRequest'
            examples:
              account_opening:
                summary: Kontoeröffnung
                value:
                  customerId: "sha256:a1b2c3d4e5f6..."
                  requestingInstitution: "CH-BANK-001"
                  providingInstitution: "CH-BANK-002"
                  dataCategories: ["basicData", "identification", "kycData"]
                  purpose: "accountOpening"
                  expiryDate: "2024-12-31T23:59:59Z"
                  customerContactMethod: "email"
      responses:
        '201':
          description: Consent erfolgreich erstellt
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsentResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /consent/{consentId}:
    get:
      summary: Consent-Status abrufen
      description: Ruft den aktuellen Status eines Consent-Requests ab
      operationId: getConsentStatus
      tags:
        - Consent Management
      parameters:
        - name: consentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        '200':
          description: Consent-Status erfolgreich abgerufen
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsentStatus'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      summary: Consent widerrufen
      description: Widerruft einen bestehenden Consent
      operationId: revokeConsent
      tags:
        - Consent Management
      parameters:
        - name: consentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Consent erfolgreich widerrufen
        '404':
          $ref: '#/components/responses/NotFound'

  # REFERENZPROZESS ENDPOINTS
  /process/initialize:
    post:
      summary: Referenzprozess initialisieren (Step 1)
      description: Initiiert den universellen 10-Stufen-Referenzprozess für Customer Onboarding
      operationId: initializeProcess
      tags:
        - Referenzprozess
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProcessInitializationRequest'
      responses:
        '201':
          description: Referenzprozess erfolgreich initialisiert
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessInitializationResponse'
        '400':
          $ref: '#/components/responses/BadRequest'

  /process/{processId}/step/{stepNumber}:
    post:
      summary: Referenzprozess-Schritt ausführen
      description: Führt einen spezifischen Schritt (1-10) des Referenzprozesses aus
      operationId: executeProcessStep
      tags:
        - Referenzprozess
      parameters:
        - name: processId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: stepNumber
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
            maximum: 10
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProcessStepRequest'
      responses:
        '200':
          description: Prozessschritt erfolgreich ausgeführt
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessStepResponse'

  /process/{processId}/status:
    get:
      summary: Referenzprozess-Status abrufen
      description: Ruft den aktuellen Status und Fortschritt des Referenzprozesses ab
      operationId: getProcessStatus
      tags:
        - Referenzprozess
      parameters:
        - name: processId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Prozess-Status erfolgreich abgerufen
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessStatus'

  # CUSTOMER DATA EXCHANGE
  /customer/check:
    post:
      summary: Kunden-Existenz prüfen
      description: Prüft ob ein Kunde bereits bei einer Institution identifiziert wurde (MVP Identifikation)
      operationId: checkCustomer
      tags:
        - Customer Data
      security:
        - mTLS: []
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerCheckRequest'
            examples:
              basic_check:
                summary: Basis-Kundenprüfung
                value:
                  sharedCustomerHash: "sha256:abc123def456..."
                  basicData:
                    lastName: "Müller"
                    givenName: "Hans"
                    birthDate: "1985-03-15"
                    nationality: ["CH"]
      responses:
        '200':
          description: Kunde erfolgreich geprüft
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerCheckResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /customer/fullRequest:
    post:
      summary: Vollständige Kundendaten anfordern
      description: Fordert das vollständige Kundendatenset an (erfordert gültigen Consent)
      operationId: requestFullCustomerData
      tags:
        - Customer Data
      security:
        - mTLS: []
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FullDataRequest'
      responses:
        '200':
          description: Kundendaten erfolgreich übertragen
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FullCustomerDataset'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /customer/data:
    post:
      summary: Kundendaten mit Consent abrufen
      description: Ruft spezifische Kundendatenmodule basierend auf gewährtem Consent ab
      operationId: getCustomerData
      tags:
        - Customer Data
      security:
        - mTLS: []
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerDataRequest'
      responses:
        '200':
          description: Kundendaten erfolgreich abgerufen
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerDataResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'

  # PORTFOLIO & EVV SERVICES
  /portfolio/sync:
    post:
      summary: Portfolio-Daten synchronisieren (UC4 EVV)
      description: Synchronisiert Portfolio-Daten zwischen verschiedenen Wealth Management Providern
      operationId: syncPortfolioData
      tags:
        - Portfolio Services
      security:
        - mTLS: []
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PortfolioSyncRequest'
      responses:
        '200':
          description: Portfolio-Synchronisation erfolgreich
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortfolioSyncResponse'

  /mifid/assessment:
    post:
      summary: MiFID II Suitability Assessment
      description: Führt MiFID II konforme Anlageeignungsprüfung durch
      operationId: performMiFIDAssessment
      tags:
        - Compliance
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MiFIDAssessmentRequest'
      responses:
        '200':
          description: MiFID II Assessment erfolgreich
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MiFIDAssessmentResponse'

  # AGE VERIFICATION (UC3)
  /verification/age:
    post:
      summary: Datenschutzkonforme Altersverifikation (UC3)
      description: Privacy-preserving Altersverifikation ohne vollständige Identitätspreisgabe
      operationId: verifyAge
      tags:
        - Age Verification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AgeVerificationRequest'
      responses:
        '200':
          description: Altersverifikation erfolgreich
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgeVerificationResponse'

  # IDENTIFICATION SERVICES
  /identification/{verificationId}/status:
    get:
      summary: Identifikations-Status abrufen
      description: Ruft den Status einer bestehenden Identifikation ab (für UC2 Re-identification)
      operationId: getIdentificationStatus
      tags:
        - Identification
      parameters:
        - name: verificationId
          in: path
          required: true
          schema:
            type: string
          example: "VER-20240115-001"
      responses:
        '200':
          description: Identifikations-Status erfolgreich abgerufen
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentificationStatusResponse'
        '404':
          $ref: '#/components/responses/NotFound'

  /identification/verify:
    post:
      summary: Identifikation verifizieren
      description: Verifiziert Identifikationsdaten gegen E-ID oder andere Quellen
      operationId: verifyIdentification
      tags:
        - Identification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentificationRequest'
      responses:
        '200':
          description: Identifikation erfolgreich verifiziert
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentificationResponse'
        '400':
          $ref: '#/components/responses/BadRequest'

  # BACKGROUND CHECKS
  /checks/perform:
    post:
      summary: Gezielte Background Checks ausführen
      description: Führt spezifische Background Checks (Sanctions, PEP, etc.) durch
      operationId: performBackgroundChecks
      tags:
        - Background Checks
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BackgroundChecksRequest'
      responses:
        '200':
          description: Background Checks erfolgreich durchgeführt
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackgroundChecksResponse'
        '400':
          $ref: '#/components/responses/BadRequest'

  /checks/comprehensive:
    post:
      summary: Umfassende Background Checks
      description: Führt KYC, AML, PEP und andere regulatorische Checks durch
      operationId: performComprehensiveChecks
      tags:
        - Background Checks
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ComprehensiveCheckRequest'
      responses:
        '200':
          description: Checks erfolgreich durchgeführt
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComprehensiveCheckResponse'
        '400':
          $ref: '#/components/responses/BadRequest'

  # SIGNATURE SERVICES
  /signature/initiate:
    post:
      summary: Signatur-Prozess initiieren
      description: Startet einen QES- oder eSignatur-Prozess
      operationId: initiateSignature
      tags:
        - Signature Services
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignatureRequest'
      responses:
        '201':
          description: Signatur-Prozess erfolgreich initiiert
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignatureResponse'

  /signature/{signatureId}/status:
    get:
      summary: Signatur-Status abrufen
      description: Ruft den Status eines Signatur-Prozesses ab
      operationId: getSignatureStatus
      tags:
        - Signature Services
      parameters:
        - name: signatureId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Signatur-Status erfolgreich abgerufen
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignatureStatus'

  # REGISTRY SERVICES
  /registry/participants:
    get:
      summary: Teilnehmer im Netzwerk auflisten
      description: Listet alle aktiven Teilnehmer im föderierten System auf
      operationId: listParticipants
      tags:
        - Registry
      responses:
        '200':
          description: Teilnehmer erfolgreich abgerufen
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParticipantList'

  # PUSHED AUTHORIZATION REQUESTS (PAR) - FAPI 2.0
  /par:
    post:
      summary: Pushed Authorization Request
      description: Submits authorization request parameters to the authorization server (FAPI 2.0 required)
      operationId: createPushedAuthorizationRequest
      tags:
        - FAPI 2.0 OAuth
      security:
        - mTLS: []
        - PrivateKeyJWT: []
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PARRequest'
            examples:
              consent_request:
                summary: Consent Authorization Request
                value:
                  client_id: "CH-BANK-001"
                  response_type: "code"
                  scope: "consent:read consent:write customer:read"
                  redirect_uri: "https://client.example.com/callback"
                  state: "xyz"
                  code_challenge: "E9Melhoa2OwvFrEMTJguCHaoeK1t8URWbuGJSstw-cM"
                  code_challenge_method: "S256"
      responses:
        '201':
          description: PAR erfolgreich erstellt
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PARResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  # HEALTH CHECK
  /health:
    get:
      summary: API Health Check
      description: Überprüft die Verfügbarkeit der API
      operationId: healthCheck
      tags:
        - Health
      security: []
      responses:
        '200':
          description: API ist verfügbar
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT-Token mit Consent-Claims für API-Zugriff (FAPI 2.0 compliant)
    DPoP:
      type: http
      scheme: DPoP
      description: DPoP (Demonstrating Proof-of-Possession) für sender-constrained tokens
    mTLS:
      type: mutualTLS
      description: Mutual TLS für höchste Sicherheitsanforderungen (FAPI 2.0 compliant)
    private_key_jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Private Key JWT client authentication (RFC 7523) - alternative zu mTLS
    RegistrationToken:
      type: http
      scheme: bearer
      description: Registration access token für dynamic client registration

  responses:
    BadRequest:
      description: Ungültige Anfrage
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "INVALID_REQUEST"
            message: "Missing required field: customerId"
            timestamp: "2024-01-15T10:30:00Z"

    Unauthorized:
      description: Nicht autorisiert
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "UNAUTHORIZED"
            message: "Invalid or missing authentication token"
            timestamp: "2024-01-15T10:30:00Z"

    Forbidden:
      description: Zugriff verweigert
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "FORBIDDEN"
            message: "Insufficient permissions for requested operation"
            timestamp: "2024-01-15T10:30:00Z"

    NotFound:
      description: Ressource nicht gefunden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "NOT_FOUND"
            message: "Consent with ID not found"
            timestamp: "2024-01-15T10:30:00Z"

    InternalServerError:
      description: Interner Serverfehler
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "INTERNAL_ERROR"
            message: "An unexpected error occurred"
            timestamp: "2024-01-15T10:30:00Z"

  schemas:
    ErrorResponse:
      type: object
      required:
        - error
        - message
        - timestamp
      properties:
        error:
          type: string
          description: Fehlercode
        message:
          type: string
          description: Fehlerbeschreibung
        timestamp:
          type: string
          format: date-time
          description: Zeitstempel des Fehlers
        details:
          type: object
          description: Zusätzliche Fehlerdetails

    HealthStatus:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, unhealthy]
        timestamp:
          type: string
          format: date-time
        version:
          type: string
        services:
          type: object
          properties:
            database:
              type: string
              enum: [up, down]
            external_apis:
              type: string
              enum: [up, down]

    # CONSENT SCHEMAS
    ConsentRequest:
      type: object
      required:
        - customerId
        - requestingInstitution
        - dataCategories
        - purpose
        - expiryDate
      properties:
        customerId:
          type: string
          description: Eindeutige Kunden-ID (sharedCustomerHash)
          example: "sha256:abc123..."
        requestingInstitution:
          type: string
          description: Institution die Daten anfordert
          example: "CH-BANK-001"
        providingInstitution:
          type: string
          description: Institution die Daten bereitstellt
          example: "CH-BANK-002"
        dataCategories:
          type: array
          items:
            $ref: '#/components/schemas/DataCategory'
          description: Angeforderte Datenkategorien
        purpose:
          type: string
          enum: [accountOpening, creditAssessment, compliance, customerUpdate]
          description: Zweck der Datenverwendung
        expiryDate:
          type: string
          format: date-time
          description: Ablaufzeitpunkt des Consents
        customerContactMethod:
          type: string
          enum: [email, sms, app, postal]
          description: Bevorzugter Kontaktweg für Consent-Bestätigung

    ConsentResponse:
      type: object
      properties:
        consentId:
          type: string
          format: uuid
          description: Eindeutige Consent-ID
        status:
          type: string
          enum: [pending, approved, rejected, expired]
        consentUrl:
          type: string
          format: uri
          description: URL für Kunden-Consent-Interface
        qrCode:
          type: string
          description: Base64-kodierter QR-Code für mobilen Consent
        expiryDate:
          type: string
          format: date-time

    ConsentStatus:
      type: object
      properties:
        consentId:
          type: string
          format: uuid
        status:
          type: string
          enum: [pending, approved, rejected, expired, revoked]
        approvedAt:
          type: string
          format: date-time
        revokedAt:
          type: string
          format: date-time
        dataCategories:
          type: array
          items:
            $ref: '#/components/schemas/DataCategory'

    DataCategory:
      type: string
      enum: 
        - basicData
        - identification
        - contactInformation
        - addressData
        - kycData
        - riskProfile
        - complianceData
        - extendedData

    # CUSTOMER DATA SCHEMAS
    CustomerCheckRequest:
      type: object
      required:
        - sharedCustomerHash
        - basicData
      properties:
        sharedCustomerHash:
          type: string
          description: SHA-256 Hash der Grunddaten für Matching
          example: "sha256:a1b2c3d4..."
        basicData:
          $ref: '#/components/schemas/BasicCustomerData'

    CustomerCheckResponse:
      type: object
      properties:
        match:
          type: boolean
          description: Ob ein Kunde gefunden wurde
        identificationDate:
          type: string
          format: date-time
          description: Datum der letzten Identifikation
        levelOfAssurance:
          type: string
          enum: [low, substantial, high]
          description: Sicherheitsniveau der Identifikation
        validUntil:
          type: string
          format: date-time
          description: Gültigkeit der Identifikation

    FullDataRequest:
      type: object
      required:
        - sharedCustomerHash
        - purpose
        - consentToken
      properties:
        sharedCustomerHash:
          type: string
          description: SHA-256 Hash des Kunden
        purpose:
          type: string
          enum: [accountOpening, creditAssessment, compliance]
        consentToken:
          type: string
          description: JWT-Token mit Consent-Nachweis

    FullCustomerDataset:
      type: object
      properties:
        basicData:
          $ref: '#/components/schemas/BasicCustomerData'
        contactInformation:
          $ref: '#/components/schemas/ContactInformation'
        addressData:
          $ref: '#/components/schemas/AddressData'
        identification:
          $ref: '#/components/schemas/IdentificationData'
        kycData:
          $ref: '#/components/schemas/KYCData'
        complianceData:
          $ref: '#/components/schemas/ComplianceData'
        riskProfile:
          $ref: '#/components/schemas/RiskProfile'
        metadata:
          $ref: '#/components/schemas/DataMetadata'

    BasicCustomerData:
      type: object
      required:
        - lastName
        - givenName
        - birthDate
        - nationality
      properties:
        lastName:
          type: string
          description: Nachname
          example: "Müller"
          maxLength: 100
        givenName:
          type: string
          description: Vorname(n)
          example: "Hans Peter"
          maxLength: 100
        middleName:
          type: string
          description: Weitere Vornamen
          maxLength: 100
        title:
          type: string
          description: Titel
          example: "Dr."
          maxLength: 50
        birthDate:
          type: string
          format: date
          description: Geburtsdatum
          example: "1985-03-15"
        birthPlace:
          type: string
          description: Geburtsort
          example: "Zürich"
          maxLength: 100
        nationality:
          type: array
          items:
            type: string
            pattern: '^[A-Z]{2}$'
          description: Nationalität(en) (ISO 3166-1)
          example: ["CH", "DE"]
          minItems: 1
          maxItems: 5
        gender:
          type: string
          enum: [male, female, other, unknown]
        maritalStatus:
          type: string
          enum: [single, married, divorced, widowed, registered_partnership]
        language:
          type: string
          description: Bevorzugte Sprache (ISO 639-1)
          example: "de"
          pattern: '^[a-z]{2}$'

    ContactInformation:
      type: object
      properties:
        primaryEmail:
          type: string
          format: email
          description: Primäre E-Mail-Adresse
          maxLength: 255
        secondaryEmail:
          type: string
          format: email
          description: Sekundäre E-Mail-Adresse
          maxLength: 255
        mobilePhone:
          type: string
          description: Mobiltelefonnummer (E.164 Format)
          example: "+41791234567"
          pattern: '^\+[1-9]\d{1,14}$'
        landlinePhone:
          type: string
          description: Festnetznummer
          pattern: '^\+[1-9]\d{1,14}$'
        preferredContactMethod:
          type: string
          enum: [email, sms, phone, postal, app]
        communicationLanguage:
          type: string
          description: Kommunikationssprache
          pattern: '^[a-z]{2}$'
        availabilityHours:
          type: string
          description: Verfügbarkeitszeiten
          example: "09:00-17:00"

    AddressData:
      type: object
      properties:
        residentialAddress:
          $ref: '#/components/schemas/Address'
        mailingAddress:
          $ref: '#/components/schemas/Address'
        businessAddress:
          $ref: '#/components/schemas/Address'
        previousAddresses:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/Address'
              - type: object
                properties:
                  validFrom:
                    type: string
                    format: date
                  validTo:
                    type: string
                    format: date

    Address:
      type: object
      required:
        - street
        - postalCode
        - city
        - country
      properties:
        street:
          type: string
          description: Straße und Hausnummer
          example: "Bahnhofstrasse 1"
          maxLength: 255
        addressLine2:
          type: string
          description: Adresszusatz
          maxLength: 255
        postalCode:
          type: string
          description: Postleitzahl
          example: "8001"
          maxLength: 20
        city:
          type: string
          description: Ort
          example: "Zürich"
          maxLength: 100
        region:
          type: string
          description: Kanton/Region
          example: "ZH"
          maxLength: 100
        country:
          type: string
          description: Land (ISO 3166-1)
          example: "CH"
          pattern: '^[A-Z]{2}$'
        addressType:
          type: string
          enum: [residential, mailing, business, temporary]

    IdentificationData:
      type: object
      properties:
        identificationMethod:
          type: string
          enum: [video_identification, online_identification, personal_appearance, eid]
          description: Identifikationsmethode
        documentType:
          type: string
          enum: [passport, id_card, driving_license, eid]
          description: Dokumententyp
        documentNumber:
          type: string
          description: Dokumentennummer
          maxLength: 50
        issuingAuthority:
          type: string
          description: Ausstellende Behörde
          maxLength: 255
        issueDate:
          type: string
          format: date
          description: Ausstellungsdatum
        expiryDate:
          type: string
          format: date
          description: Ablaufdatum
        issuingCountry:
          type: string
          description: Ausstellungsland (ISO 3166-1)
          pattern: '^[A-Z]{2}$'
        levelOfAssurance:
          type: string
          enum: [low, substantial, high]
          description: Sicherheitsniveau (eIDAS-konform)
        verificationDate:
          type: string
          format: date-time
          description: Verifikationsdatum
        verificationMethod:
          type: string
          description: Verifikationsmethode
          maxLength: 100
        documentImageUrl:
          type: string
          format: uri
          description: Signierter Link zum Dokumentenscan (10min gültig)
        biometricData:
          type: object
          description: Biometrische Daten (wenn verfügbar)
          properties:
            faceImage:
              type: string
              description: Gesichtsbild (Base64)
            livenessScore:
              type: number
              minimum: 0
              maximum: 1
              description: Liveness-Check Score (0-1)
        nfcData:
          type: object
          description: NFC-Daten von eID
          properties:
            available:
              type: boolean
            verified:
              type: boolean

    KYCData:
      type: object
      properties:
        occupation:
          type: string
          description: Beruf
          maxLength: 255
        employer:
          type: string
          description: Arbeitgeber
          maxLength: 255
        employmentType:
          type: string
          enum: [employed, self_employed, unemployed, retired, student]
        annualIncome:
          $ref: '#/components/schemas/MonetaryAmount'
        totalAssets:
          $ref: '#/components/schemas/MonetaryAmount'
        sourceOfFunds:
          type: string
          enum: [salary, business_income, inheritance, investment_returns, other]
        sourceOfFundsDescription:
          type: string
          description: Beschreibung der Mittelherkunft
          maxLength: 1000
        pepStatus:
          type: boolean
          description: Politisch exponierte Person
        pepDetails:
          type: string
          description: Details zur PEP-Stellung
          maxLength: 1000
        beneficialOwners:
          type: array
          items:
            $ref: '#/components/schemas/BeneficialOwner'
        businessPurpose:
          type: string
          description: Geschäftszweck (bei Firmenkunden)
          maxLength: 1000

    ComplianceData:
      type: object
      properties:
        fatcaStatus:
          type: string
          enum: [us_person, non_us_person, uncertain]
        fatcaClassification:
          type: string
          description: FATCA-Klassifikation
          maxLength: 100
        crsReportable:
          type: boolean
          description: CRS-Meldepflicht
        taxResidencies:
          type: array
          items:
            $ref: '#/components/schemas/TaxResidency'
        tinNumbers:
          type: array
          items:
            $ref: '#/components/schemas/TINNumber'
        sanctionsScreening:
          $ref: '#/components/schemas/ScreeningResult'
        amlRiskRating:
          type: string
          enum: [low, medium, high]
        lastDueDiligence:
          type: string
          format: date-time
        nextReviewDate:
          type: string
          format: date

    RiskProfile:
      type: object
      properties:
        investmentExperience:
          type: string
          enum: [none, limited, good, extensive]
        investmentKnowledge:
          type: string
          enum: [basic, intermediate, advanced, professional]
        riskTolerance:
          type: string
          enum: [conservative, moderate, aggressive]
        investmentHorizon:
          type: string
          enum: [short, medium, long]
        investmentObjectives:
          type: array
          items:
            type: string
            enum: [capital_preservation, income, growth, speculation]
        esgPreferences:
          type: object
          properties:
            considerEsgFactors:
              type: boolean
            esgImportance:
              type: string
              enum: [not_important, somewhat_important, very_important]
            exclusions:
              type: array
              items:
                type: string

    BeneficialOwner:
      type: object
      required:
        - name
        - percentage
      properties:
        name:
          type: string
          maxLength: 255
        percentage:
          type: number
          minimum: 0
          maximum: 100
          description: Anteil in Prozent
        pepStatus:
          type: boolean

    TaxResidency:
      type: object
      required:
        - country
      properties:
        country:
          type: string
          description: Land (ISO 3166-1)
          pattern: '^[A-Z]{2}$'
        isPrimary:
          type: boolean
        tinNumber:
          type: string
          maxLength: 50

    TINNumber:
      type: object
      required:
        - number
        - country
      properties:
        number:
          type: string
          maxLength: 50
        country:
          type: string
          pattern: '^[A-Z]{2}$'
        type:
          type: string
          maxLength: 50

    ScreeningResult:
      type: object
      properties:
        sanctionsList:
          type: string
          enum: [clear, match, potential_match]
        pepCheck:
          type: string
          enum: [clear, match, potential_match]
        adverseMedia:
          type: string
          enum: [clear, match, potential_match]
        lastScreeningDate:
          type: string
          format: date-time
        nextScreeningDate:
          type: string
          format: date

    MonetaryAmount:
      type: object
      required:
        - amount
        - currency
      properties:
        amount:
          type: number
          minimum: 0
          description: Betrag
        currency:
          type: string
          description: Währung (ISO 4217)
          example: "CHF"
          pattern: '^[A-Z]{3}$'

    DataMetadata:
      type: object
      properties:
        originator:
          type: string
          description: Ursprungsystem/Institution
          maxLength: 255
        createdAt:
          type: string
          format: date-time
        lastUpdated:
          type: string
          format: date-time
        version:
          type: string
          description: Datenversion
          maxLength: 50
        dataClassification:
          type: string
          enum: [public, internal, confidential, restricted]
        retentionPolicy:
          type: string
          description: Aufbewahrungsrichtlinie
          maxLength: 255
        legalBasis:
          type: string
          description: Rechtsgrundlage der Verarbeitung
          maxLength: 255
        qualityScore:
          type: number
          minimum: 0
          maximum: 1
          description: Datenqualitätsbewertung (0-1)
        verificationStatus:
          type: string
          enum: [unverified, verified, outdated]

    # IDENTIFICATION SCHEMAS
    IdentificationRequest:
      type: object
      required:
        - customerId
        - identificationType
      properties:
        customerId:
          type: string
          maxLength: 255
        identificationType:
          type: string
          enum: [eid_verification, document_verification, biometric_verification]
        documentData:
          $ref: '#/components/schemas/DocumentData'
        biometricData:
          $ref: '#/components/schemas/BiometricData'

    IdentificationResponse:
      type: object
      properties:
        verificationId:
          type: string
          format: uuid
        status:
          type: string
          enum: [success, failed, pending]
        levelOfAssurance:
          type: string
          enum: [low, substantial, high]
        verificationMethod:
          type: string
          maxLength: 100
        timestamp:
          type: string
          format: date-time
        errors:
          type: array
          items:
            type: string

    DocumentData:
      type: object
      properties:
        documentType:
          type: string
          enum: [passport, id_card, driving_license, eid]
        documentImage:
          type: string
          description: Base64-kodiertes Dokumentenbild
        nfcData:
          type: string
          description: NFC-Daten von eID

    BiometricData:
      type: object
      properties:
        faceImage:
          type: string
          description: Base64-kodiertes Gesichtsbild
        livenessVideo:
          type: string
          description: Liveness-Check Video

    # CHECK SCHEMAS
    ComprehensiveCheckRequest:
      type: object
      required:
        - customerId
        - checkTypes
      properties:
        customerId:
          type: string
          maxLength: 255
        customerData:
          $ref: '#/components/schemas/BasicCustomerData'
        checkTypes:
          type: array
          items:
            type: string
            enum: [sanctions, pep, crime, adverse_media, credit, zek_iko]
          minItems: 1

    ComprehensiveCheckResponse:
      type: object
      properties:
        checkId:
          type: string
          format: uuid
        results:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/CheckResult'
        overallRisk:
          type: string
          enum: [low, medium, high]
        timestamp:
          type: string
          format: date-time

    CheckResult:
      type: object
      properties:
        status:
          type: string
          enum: [clear, alert, blocked]
        score:
          type: number
          minimum: 0
          maximum: 1
          description: Risk Score (0-1)
        details:
          type: string
          maxLength: 1000
        lastChecked:
          type: string
          format: date-time

    # SIGNATURE SCHEMAS
    SignatureRequest:
      type: object
      required:
        - customerId
        - documents
        - signatureType
      properties:
        customerId:
          type: string
          maxLength: 255
        documents:
          type: array
          items:
            $ref: '#/components/schemas/DocumentToSign'
          minItems: 1
        signatureType:
          type: string
          enum: [qes, aes, simple]
        notificationMethod:
          type: string
          enum: [email, sms, app]

    DocumentToSign:
      type: object
      required:
        - documentId
        - documentName
        - documentHash
      properties:
        documentId:
          type: string
          maxLength: 255
        documentName:
          type: string
          maxLength: 255
        documentHash:
          type: string
          description: SHA-256 Hash des Dokuments
        documentUrl:
          type: string
          format: uri

    SignatureResponse:
      type: object
      properties:
        signatureId:
          type: string
          format: uuid
        signatureUrl:
          type: string
          format: uri
          description: URL für Signatur-Interface
        qrCode:
          type: string
          description: QR-Code für mobile Signatur
        expiryDate:
          type: string
          format: date-time

    SignatureStatus:
      type: object
      properties:
        signatureId:
          type: string
          format: uuid
        status:
          type: string
          enum: [pending, signed, expired, failed]
        signedAt:
          type: string
          format: date-time
        signatureHash:
          type: string
          description: Hash der Signatur
        certificateInfo:
          type: object
          description: Zertifikatsinformationen
          properties:
            issuer:
              type: string
            subject:
              type: string
            validFrom:
              type: string
              format: date-time
            validTo:
              type: string
              format: date-time

    # PAR SCHEMAS - FAPI 2.0
    PARRequest:
      type: object
      required:
        - client_id
        - response_type
        - redirect_uri
        - code_challenge
        - code_challenge_method
      properties:
        client_id:
          type: string
          description: Client Identifier
          maxLength: 255
        response_type:
          type: string
          enum: [code]
          description: OAuth 2.1 response type (only code allowed)
        scope:
          type: string
          description: OAuth scopes
          example: "consent:read consent:write customer:read"
        redirect_uri:
          type: string
          format: uri
          description: Client redirect URI
        state:
          type: string
          description: OAuth state parameter
          maxLength: 255
        code_challenge:
          type: string
          description: PKCE code challenge (FAPI 2.0 required)
          maxLength: 128
        code_challenge_method:
          type: string
          enum: [S256]
          description: PKCE code challenge method (S256 required)
        nonce:
          type: string
          description: OpenID Connect nonce
          maxLength: 255

    PARResponse:
      type: object
      required:
        - request_uri
        - expires_in
      properties:
        request_uri:
          type: string
          format: uri
          description: Request URI to use in authorization request
          example: "urn:ietf:params:oauth:request_uri:6esc_11ACC5bwc014ltc14eY22c"
        expires_in:
          type: integer
          description: Request URI lifetime in seconds (max 60 for FAPI 2.0)
          maximum: 60
          example: 60

    # REFERENZPROZESS SCHEMAS
    ProcessInitializationRequest:
      type: object
      required:
        - industry
        - useCase
        - customerContext
      properties:
        industry:
          type: string
          enum: [banking, insurance, mobility, retail, government, healthcare]
          description: Ziel-Ecosystem für den Prozess
        useCase:
          type: string
          enum: [kundenbeziehungseroffnung, re_identification, age_verification, evv_lifecycle]
          description: Spezifischer Use Case
        customerContext:
          type: object
          properties:
            existingCustomer:
              type: boolean
            customerHint:
              type: string
              maxLength: 255
        processConfiguration:
          type: object
          properties:
            skipSteps:
              type: array
              items:
                type: integer
                minimum: 1
                maximum: 10
            customData:
              type: object

    ProcessInitializationResponse:
      type: object
      properties:
        processId:
          type: string
          format: uuid
        processType:
          type: string
        estimatedSteps:
          type: integer
          minimum: 1
          maximum: 10
        currentStep:
          type: integer
          default: 1
        nextStepUrl:
          type: string
          format: uri

    ProcessStepRequest:
      type: object
      required:
        - stepData
      properties:
        stepData:
          type: object
          description: Step-spezifische Daten
        skipToStep:
          type: integer
          minimum: 1
          maximum: 10
        customerConsent:
          type: boolean

    ProcessStepResponse:
      type: object
      properties:
        stepNumber:
          type: integer
        stepName:
          type: string
        status:
          type: string
          enum: [completed, pending, failed, skipped]
        nextStep:
          type: integer
        processComplete:
          type: boolean
        result:
          type: object
        errors:
          type: array
          items:
            type: string

    ProcessStatus:
      type: object
      properties:
        processId:
          type: string
          format: uuid
        currentStep:
          type: integer
        completedSteps:
          type: array
          items:
            type: integer
        overallProgress:
          type: number
          minimum: 0
          maximum: 100
          description: Fortschritt in Prozent
        status:
          type: string
          enum: [active, completed, failed, cancelled]
        estimatedCompletion:
          type: string
          format: date-time

    # USE CASE SPECIFIC SCHEMAS
    CustomerDataRequest:
      type: object
      required:
        - sharedCustomerHash
        - requestedModules
        - consentToken
      properties:
        sharedCustomerHash:
          type: string
          description: SHA-256 Hash des Kunden
        requestedModules:
          type: array
          items:
            type: string
            enum: [basisdaten_module, erweiterte_daten_module, identifikation_module, background_checks_module]
          description: Angeforderte Datenbausteine
        consentToken:
          type: string
          description: JWT-Token mit Consent-Nachweis
        purpose:
          type: string
          enum: [kundenbeziehungseroffnung, re_identification, compliance_update]

    CustomerDataResponse:
      type: object
      properties:
        availableModules:
          type: array
          items:
            type: string
        moduleData:
          type: object
          description: Bereitgestellte Datenbausteine
        verificationStatus:
          type: object
        lastUpdated:
          type: string
          format: date-time

    PortfolioSyncRequest:
      type: object
      required:
        - customerId
        - sourceProviders
        - targetProvider
      properties:
        customerId:
          type: string
        sourceProviders:
          type: array
          items:
            $ref: '#/components/schemas/ProviderRelationship'
        targetProvider:
          type: string
        transferType:
          type: string
          enum: [full_portfolio_migration, partial_portfolio_migration, data_sync_only]
        assetCategories:
          type: array
          items:
            type: string
            enum: [equities, bonds, funds, alternatives, derivatives, cash]

    ProviderRelationship:
      type: object
      properties:
        providerId:
          type: string
        relationshipType:
          type: string
          enum: [primary_wealth_manager, custody_services, advisory_only]
        since:
          type: string
          format: date
        portfolioValue:
          $ref: '#/components/schemas/MonetaryAmount'
        custodyBank:
          type: string

    PortfolioSyncResponse:
      type: object
      properties:
        syncId:
          type: string
          format: uuid
        status:
          type: string
          enum: [initiated, in_progress, completed, failed]
        syncedAssets:
          type: object
        dataQuality:
          type: number
          minimum: 0
          maximum: 1
        estimatedCompletion:
          type: string
          format: date-time

    MiFIDAssessmentRequest:
      type: object
      required:
        - customerId
        - investmentObjectives
      properties:
        customerId:
          type: string
        existingAssessments:
          type: array
          items:
            type: object
        investmentObjectives:
          type: array
          items:
            type: string
        investmentExperience:
          type: string
          enum: [none, limited, good, extensive]
        financialSituation:
          type: object
          properties:
            netWealth:
              $ref: '#/components/schemas/MonetaryAmount'
            liquidityNeeds:
              type: string
              enum: [low, medium, high]

    MiFIDAssessmentResponse:
      type: object
      properties:
        assessmentId:
          type: string
          format: uuid
        suitabilityRating:
          type: string
          enum: [suitable, suitable_with_restrictions, not_suitable]
        riskProfile:
          type: string
          enum: [conservative, moderate, aggressive]
        approvedInstruments:
          type: array
          items:
            type: string
        restrictions:
          type: array
          items:
            type: string
        validUntil:
          type: string
          format: date

    AgeVerificationRequest:
      type: object
      required:
        - customerId
        - requiredAttribute
        - minimumAge
      properties:
        customerId:
          type: string
        requiredAttribute:
          type: string
          example: "age_minimum_18"
        purpose:
          type: string
          enum: [cross_industry_age_gate, regulatory_compliance]
        requestingService:
          type: string
        minimumAge:
          type: integer
          minimum: 16
          maximum: 25
        attributeOnly:
          type: boolean
          default: true
          description: Nur Attribut (ja/nein) zurückgeben
        dataMinimization:
          type: boolean
          default: true
        existingVerificationId:
          type: string

    AgeVerificationResponse:
      type: object
      properties:
        verificationId:
          type: string
          format: uuid
        meetsRequirement:
          type: boolean
          description: Erfüllt das Mindestalter (ja/nein)
        attributeValue:
          type: string
          enum: ["YES", "NO"]
          description: Attribut-only Antwort
        verificationMethod:
          type: string
        assuranceLevel:
          type: string
          enum: [low, substantial, high]
        timestamp:
          type: string
          format: date-time
        privacyCompliance:
          type: object
          properties:
            gdprCompliant:
              type: boolean
            dataMinimizationApplied:
              type: boolean
            actualAgeDisclosed:
              type: boolean
              default: false

    IdentificationStatusResponse:
      type: object
      properties:
        verificationId:
          type: string
        status:
          type: string
          enum: [valid, expired, revoked, pending]
        verificationMethod:
          type: string
        documentType:
          type: string
        assuranceLevel:
          type: string
          enum: [low, substantial, high]
        issuedAt:
          type: string
          format: date-time
        validUntil:
          type: string
          format: date-time
        canBeReused:
          type: boolean

    BackgroundChecksRequest:
      type: object
      required:
        - customerId
        - checkTypes
      properties:
        customerId:
          type: string
        customerData:
          type: object
        checkTypes:
          type: array
          items:
            type: string
            enum: [sanctions, pep, adverse_media, identity_verification, sanctions_update, pep_update]
        baselineDate:
          type: string
          format: date-time
          description: Datum für inkrementelle Updates
        riskProfile:
          type: string
          enum: [standard, enhanced, high_risk]

    BackgroundChecksResponse:
      type: object
      properties:
        checkId:
          type: string
          format: uuid
        results:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/CheckResult'
        overallRisk:
          type: string
          enum: [low, medium, high]
        newFindings:
          type: boolean
        recommendedActions:
          type: array
          items:
            type: string
        nextReviewDate:
          type: string
          format: date
        timestamp:
          type: string
          format: date-time

    # REGISTRY SCHEMAS
    ParticipantList:
      type: object
      properties:
        participants:
          type: array
          items:
            $ref: '#/components/schemas/Participant'

    Participant:
      type: object
      properties:
        participantId:
          type: string
          description: Eindeutige Teilnehmer-ID
          maxLength: 100
        name:
          type: string
          description: Name der Institution
          maxLength: 255
        industry:
          type: string
          enum: [banking, insurance, real_estate, mobility, retail, government]
        endpoints:
          type: object
          description: API-Endpunkte
          properties:
            baseUrl:
              type: string
              format: uri
            healthCheck:
              type: string
              format: uri
        certificates:
          type: array
          items:
            type: string
          description: TLS-Zertifikate für mTLS
        status:
          type: string
          enum: [active, inactive, suspended]
        lastSeen:
          type: string
          format: date-time

    # OAuth 2.1 / OIDC Schemas
    OAuthError:
      type: object
      required:
        - error
      properties:
        error:
          type: string
          enum:
            - invalid_request
            - invalid_client
            - invalid_grant
            - unauthorized_client
            - unsupported_grant_type
            - invalid_scope
            - server_error
            - temporarily_unavailable
        error_description:
          type: string
          description: Human-readable error description
        error_uri:
          type: string
          format: uri
          description: URI to error documentation
        timestamp:
          type: string
          format: date-time

    TokenResponse:
      type: object
      required:
        - access_token
        - token_type
        - expires_in
      properties:
        access_token:
          type: string
          description: JWT access token
        refresh_token:
          type: string
          description: Refresh token for getting new access tokens
        token_type:
          type: string
          enum: [Bearer, DPoP]
          description: Token type (Bearer or DPoP)
        expires_in:
          type: integer
          description: Token lifetime in seconds
        scope:
          type: string
          description: Granted OAuth scopes
        id_token:
          type: string
          description: OpenID Connect ID token (JWT)

    UserInfo:
      type: object
      required:
        - sub
      properties:
        sub:
          type: string
          description: Subject identifier
        preferred_username:
          type: string
          description: Preferred username
        name:
          type: string
          description: Full name
        given_name:
          type: string
          description: Given name
        family_name:
          type: string
          description: Family name
        email:
          type: string
          format: email
          description: Email address
        email_verified:
          type: boolean
          description: Whether email is verified
        institution_id:
          type: string
          description: Associated institution identifier
        updated_at:
          type: integer
          description: Time of last update (Unix timestamp)

    IntrospectionResponse:
      type: object
      required:
        - active
      properties:
        active:
          type: boolean
          description: Whether the token is active
        client_id:
          type: string
          description: Client identifier
        scope:
          type: string
          description: Authorized scopes
        sub:
          type: string
          description: Subject of the token
        aud:
          type: string
          description: Intended audience
        iss:
          type: string
          description: Token issuer
        exp:
          type: integer
          description: Expiration time (Unix timestamp)
        iat:
          type: integer
          description: Issued at time (Unix timestamp)
        token_type:
          type: string
          enum: [Bearer, DPoP]
          description: Token type

    # Client Management Schemas
    ClientRegistrationRequest:
      type: object
      required:
        - redirect_uris
      properties:
        client_name:
          type: string
          maxLength: 255
          description: Human-readable client name
        client_uri:
          type: string
          format: uri
          description: Client website URL
        redirect_uris:
          type: array
          items:
            type: string
            format: uri
          minItems: 1
          description: Authorized redirect URIs
        grant_types:
          type: array
          items:
            type: string
            enum: [authorization_code, refresh_token]
          default: [authorization_code]
        response_types:
          type: array
          items:
            type: string
            enum: [code]
          default: [code]
        scope:
          type: string
          default: "openid profile customer:read"
        token_endpoint_auth_method:
          type: string
          enum: [private_key_jwt, tls_client_auth]
          default: private_key_jwt
        token_endpoint_auth_signing_alg:
          type: string
          enum: [PS256, ES256, EdDSA]
          default: PS256
        require_pushed_authorization_requests:
          type: boolean
          default: true
        require_signed_request_object:
          type: boolean
          default: false
        id_token_signed_response_alg:
          type: string
          enum: [PS256, ES256, EdDSA]
          default: PS256
        jwks_uri:
          type: string
          format: uri
          description: URL for client's JWK Set
        industry_type:
          type: string
          enum: [banking, insurance, fintech, other]
          default: banking
        finma_license:
          type: string
          description: FINMA license number if applicable
        swiss_qr_support:
          type: boolean
          default: false

    ClientRegistrationResponse:
      type: object
      required:
        - client_id
        - client_id_issued_at
        - registration_access_token
        - registration_client_uri
      properties:
        client_id:
          type: string
          description: Unique client identifier
        client_secret:
          type: string
          description: Client secret (if applicable)
        client_secret_expires_at:
          type: integer
          description: Client secret expiration time (0 means no expiration)
        client_id_issued_at:
          type: integer
          description: Client ID issued time (Unix timestamp)
        registration_access_token:
          type: string
          description: Token for accessing registration endpoint
        registration_client_uri:
          type: string
          format: uri
          description: URI for client configuration management
        client_name:
          type: string
          description: Client name
        redirect_uris:
          type: array
          items:
            type: string
            format: uri
        grant_types:
          type: array
          items:
            type: string
        response_types:
          type: array
          items:
            type: string
        scope:
          type: string
        token_endpoint_auth_method:
          type: string
        require_pushed_authorization_requests:
          type: boolean
        require_signed_request_object:
          type: boolean
        fapi_compliance_level:
          type: string
          enum: [baseline, advanced]
        industry_type:
          type: string
        swiss_standards_support:
          type: object
          properties:
            qr_code:
              type: boolean
            iso_20022:
              type: boolean
            finma_compliant:
              type: boolean

    ClientConfiguration:
      type: object
      required:
        - client_id
      properties:
        client_id:
          type: string
        client_secret_expires_at:
          type: integer
        client_id_issued_at:
          type: integer
        client_name:
          type: string
        client_uri:
          type: string
          format: uri
        redirect_uris:
          type: array
          items:
            type: string
            format: uri
        grant_types:
          type: array
          items:
            type: string
        response_types:
          type: array
          items:
            type: string
        scope:
          type: string
        industry_type:
          type: string
        status:
          type: string
          enum: [active, inactive]
        fapi_compliance_level:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    ClientUpdateRequest:
      type: object
      properties:
        client_name:
          type: string
          maxLength: 255
        client_uri:
          type: string
          format: uri
        redirect_uris:
          type: array
          items:
            type: string
            format: uri
          minItems: 1
        scope:
          type: string
        jwks_uri:
          type: string
          format: uri
        industry_type:
          type: string
          enum: [banking, insurance, fintech, other]
        finma_license:
          type: string
        swiss_qr_support:
          type: boolean

    # Discovery Schemas
    OIDCDiscovery:
      type: object
      required:
        - issuer
        - authorization_endpoint
        - token_endpoint
        - jwks_uri
        - response_types_supported
        - subject_types_supported
        - id_token_signing_alg_values_supported
      properties:
        issuer:
          type: string
          format: uri
        authorization_endpoint:
          type: string
          format: uri
        token_endpoint:
          type: string
          format: uri
        userinfo_endpoint:
          type: string
          format: uri
        introspection_endpoint:
          type: string
          format: uri
        jwks_uri:
          type: string
          format: uri
        pushed_authorization_request_endpoint:
          type: string
          format: uri
        response_types_supported:
          type: array
          items:
            type: string
        response_modes_supported:
          type: array
          items:
            type: string
        grant_types_supported:
          type: array
          items:
            type: string
        subject_types_supported:
          type: array
          items:
            type: string
        scopes_supported:
          type: array
          items:
            type: string
        token_endpoint_auth_methods_supported:
          type: array
          items:
            type: string
        token_endpoint_auth_signing_alg_values_supported:
          type: array
          items:
            type: string
        id_token_signing_alg_values_supported:
          type: array
          items:
            type: string
        request_object_signing_alg_values_supported:
          type: array
          items:
            type: string
        claims_supported:
          type: array
          items:
            type: string
        code_challenge_methods_supported:
          type: array
          items:
            type: string
        dpop_signing_alg_values_supported:
          type: array
          items:
            type: string
        require_pushed_authorization_requests:
          type: boolean
        require_signed_request_object:
          type: boolean

    FAPIConfiguration:
      type: object
      required:
        - issuer
        - fapi_profile
      properties:
        issuer:
          type: string
          format: uri
        fapi_profile:
          type: string
          enum: ["2.0"]
        fapi_security_profile:
          type: string
          enum: [baseline, advanced]
        fapi_compliance_level:
          type: string
          enum: [full, partial]
        require_pushed_authorization_requests:
          type: boolean
        require_signed_request_object:
          type: boolean
        token_endpoint_auth_methods_supported:
          type: array
          items:
            type: string
        tls_client_certificate_bound_access_tokens:
          type: boolean
        dpop_signing_alg_values_supported:
          type: array
          items:
            type: string
        token_binding_methods_supported:
          type: array
          items:
            type: string
        max_authorization_code_lifetime:
          type: integer
        max_access_token_lifetime:
          type: integer
        max_refresh_token_lifetime:
          type: integer
        regulatory_compliance:
          type: array
          items:
            type: string
        supported_use_cases:
          type: array
          items:
            type: string
        swiss_standards_compliance:
          type: array
          items:
            type: string

    JWKSet:
      type: object
      required:
        - keys
      properties:
        keys:
          type: array
          items:
            $ref: '#/components/schemas/JWK'

    JWK:
      type: object
      required:
        - kty
        - use
        - alg
        - kid
      properties:
        kty:
          type: string
          enum: [RSA, EC, OKP]
          description: Key type
        use:
          type: string
          enum: [sig, enc]
          description: Key use
        alg:
          type: string
          enum: [PS256, ES256, EdDSA]
          description: Algorithm
        kid:
          type: string
          description: Key identifier
        n:
          type: string
          description: RSA modulus
        e:
          type: string
          description: RSA public exponent
        crv:
          type: string
          enum: [P-256, Ed25519]
          description: Elliptic curve
        x:
          type: string
          description: EC/OKP x coordinate
        y:
          type: string
          description: EC y coordinate

    SwissBankingMetadata:
      type: object
      required:
        - issuer
        - swiss_open_banking_version
      properties:
        issuer:
          type: string
          format: uri
        swiss_open_banking_version:
          type: string
        kundenbeziehung_api_version:
          type: string
        supported_standards:
          type: array
          items:
            type: string
        finma_compliance:
          type: boolean
        dsg_compliance:
          type: boolean
        gdpr_compliance:
          type: boolean
        supported_banking_use_cases:
          type: array
          items:
            type: object
            properties:
              use_case:
                type: string
              name:
                type: string
              description:
                type: string
              endpoints:
                type: array
                items:
                  type: string
        supported_data_categories:
          type: array
          items:
            type: string
        referenzprozess_steps:
          type: array
          items:
            type: string
        technical_features:
          type: array
          items:
            type: string
        support:
          type: object
          properties:
            technical_contact:
              type: string
              format: email
            business_contact:
              type: string
              format: email
            documentation:
              type: string
              format: uri
            github:
              type: string
              format: uri